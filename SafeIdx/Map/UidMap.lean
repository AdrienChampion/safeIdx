import SafeIdx.Map.UidMapD



/-! # Mapping from uid-s to some type

`UidMap` is a thin wrapper around `UidMapD`.
-/
namespace SafeIdx

open UidSpec (ofNat toNat)



/-- A map from `Uid` to `Œ±`, built on top of `UidMapD`. -/
structure UidMap
  (Uid : Type) [UidSpec Uid]
  (Œ± : Type)
where
  len : Nat
  dmap : UidMapD len Uid Œ±



variable
  {Uid : Type}
  [UidSpec Uid]
  {Œ± : Type}
  (uidMap : UidMap Uid Œ±)
  (uid : Uid)



/-- True if `id` is a legal index for `uidMap` (decidable). -/
@[simp]
def UidMap.isLegal : Prop :=
  toNat uid < uidMap.len

instance : Decidable (uidMap.isLegal uid) := by
  simp only [UidMap.isLegal]
  exact inferInstance

/-- Turns a legal uid for a map into a `FUid` smaller than the map's length. -/
def FUid.ofLegal
  {uidMap : UidMap Uid Œ±} {uid : Uid}
  (h: uidMap.isLegal uid)
: FUid Uid uidMap.len :=
  ‚ü®uid, h‚ü©

/-- A `FUid _ n` is a legal index for `map` if `n` is smaller than `map`'s length. -/
@[simp]
def FUid.mapLift
  (fuid : FUid Uid n)
  {map : outParam $ UidMap Uid Œ±}
  (h : n ‚â§ map.len := by try simp ; assumption)
: FUid Uid map.len :=
  fuid.lift



@[inherit_doc UidMapD.mkEmpty]
def UidMap.mkEmpty
  {Œ± : outParam Type}
  (capacity : Nat := 666)
: UidMap Uid Œ± :=
  ‚ü®0, UidMapD.mkEmpty capacity‚ü©

@[simp]
theorem UidMap.mkEmpty_len
  {Œ± : outParam Type}
: (mkEmpty capacity : UidMap Uid Œ±).len = 0 := rfl

@[inherit_doc UidMapD.generate]
def UidMap.generate
  (len : Nat)
  (gen : FUid Uid len ‚Üí Œ±)
  (capacity : Nat := 666)
: UidMap Uid Œ± :=
  ‚ü®len, UidMapD.generate len gen capacity‚ü©

@[inherit_doc UidMapD.mkD]
def UidMap.mkD
  (len : Nat)
  (default : Œ±)
  (capacity : Nat := 666)
: UidMap Uid Œ± :=
  generate len (ùïÇ default) capacity
@[inherit_doc UidMapD.mkI]
def UidMap.mkI
  (len : Nat)
  [Inhabited Œ±]
  (capacity : Nat := 666)
: UidMap Uid Œ± :=
  mkD len default capacity

instance [Inhabited Œ±] (len : Nat) : Inhabited (UidMap Uid Œ±) where
  default :=
    UidMap.mkI len



@[inherit_doc UidMapD.pushIdx]
def UidMap.pushIdx
  (gen : FUid Uid (uidMap.len + 1) ‚Üí Œ±)
: FUid Uid (uidMap.len + 1) √ó UidMap Uid Œ± :=
  let (uid, dmap) := uidMap.dmap.pushIdx gen
  (uid, ‚ü®uidMap.len + 1, dmap‚ü©)
@[inherit_doc UidMapD.pushIdx']
def UidMap.pushIdx'
  (gen : FUid Uid (uidMap.len + 1) ‚Üí Œ±)
: UidMap Uid Œ± :=
  uidMap.pushIdx gen |>.2
@[inherit_doc UidMapD.push]
def UidMap.push
  (a : Œ±)
: FUid Uid (uidMap.len + 1) √ó UidMap Uid Œ± :=
  uidMap.pushIdx (ùïÇ a)
@[inherit_doc UidMapD.push']
def UidMap.push'
  (a : Œ±)
: UidMap Uid Œ± :=
  uidMap.push a |>.2

section
  variable
    {uidMap : UidMap Uid Œ±}
    {gen : FUid Uid (uidMap.len + 1) ‚Üí Œ±}
    {val : Œ±}

  @[simp]
  theorem Map.pushIdx_len : (uidMap.pushIdx gen).2.len = uidMap.len + 1 :=
    rfl
  @[simp]
  theorem Map.pushIdx'_len : (uidMap.pushIdx' gen).len = uidMap.len + 1 :=
    rfl
  @[simp]
  theorem Map.push_len : (uidMap.push val).2.len = uidMap.len + 1 :=
    rfl
  @[simp]
  theorem Map.push'_len : (uidMap.push' val).len = uidMap.len + 1 :=
    rfl
end



@[inherit_doc UidMapD.get]
def UidMap.get
  (fuid : FUid Uid uidMap.len)
: Œ± :=
  uidMap.dmap.get fuid

/-- `Uid` array-access notation for `Map`s. -/
instance : GetElem
  (UidMap Uid Œ±) Uid Œ±
  (¬∑.isLegal ¬∑)
where
  getElem dmap _uid legal :=
    FUid.ofLegal legal
    |> dmap.get

/-- `FUid` array-access notation for `Map`s. -/
instance : GetElem
  (UidMap Uid Œ±) (FUid Uid n) Œ±
  fun map _uid => n ‚â§ map.len
where
  getElem dmap fuid h :=
    dmap.get fuid.lift

@[inherit_doc UidMapD.get?]
def UidMap.get? : Uid ‚Üí Option Œ± :=
  uidMap.dmap.get?
@[inherit_doc UidMapD.get!]
def UidMap.get! : Uid ‚Üí [Inhabited Œ±] ‚Üí Œ± :=
  uidMap.dmap.get!
@[inherit_doc UidMapD.getD]
def UidMap.getD : Uid ‚Üí Œ±  ‚Üí Œ± :=
  uidMap.dmap.getD
@[inherit_doc UidMapD.getI]
def UidMap.getI : Uid ‚Üí [Inhabited Œ±] ‚Üí Œ± :=
  uidMap.dmap.getI



section set
  variable
    (fuid : FUid Uid uidMap.len)
    (a : Œ±)

  @[inherit_doc UidMapD.set]
  def UidMap.set : UidMap Uid Œ± :=
    {uidMap with dmap := uidMap.dmap.set fuid a}
  @[inherit_doc UidMapD.set?]
  def UidMap.set? : Bool √ó UidMap Uid Œ± :=
    let (flag, dmap) :=
      uidMap.dmap.set? uid a
    (flag, {uidMap with dmap})
  @[inherit_doc UidMapD.set!]
  def UidMap.set! [Inhabited Œ±] : UidMap Uid Œ± :=
    {uidMap with dmap := uidMap.dmap.set! uid a}
end set



section fold
    /-- Fold-left with element indices. -/
    def UidMap.foldlIdx
      (f : Œ≤ ‚Üí FUid Uid uidMap.len ‚Üí Œ± ‚Üí Œ≤ )
      (init : Œ≤)
    : Œ≤ :=
      uidMap.dmap.foldlIdx f init

    /-- Fold-left, see also `foldlIdx`. -/
    def UidMap.foldl
      (f : Œ≤ ‚Üí Œ± ‚Üí Œ≤)
      (init : Œ≤)
    : Œ≤ :=
      uidMap.foldlIdx (fun acc _ => f acc) init



    /-- Fold-right with element indices. -/
    def UidMap.foldrIdx
      (f : FUid Uid uidMap.len ‚Üí Œ± ‚Üí Œ≤ ‚Üí Œ≤ )
      (init : Œ≤)
    : Œ≤ :=
      uidMap.dmap.foldrIdx f init

    /-- Fold-right, see also `foldrIdx`. -/
    def UidMap.foldr
      (f : Œ± ‚Üí Œ≤ ‚Üí Œ≤)
      (init : Œ≤)
    : Œ≤ :=
      uidMap.foldrIdx (ùïÇ f) init
end fold




section pure
  /-- Constructs the map with only one mapping: first uid to `a`. -/
  def UidMap.pure (a : Œ±) : UidMap Uid Œ± :=
    ‚ü®1, UidMapD.pure a‚ü©

  instance : Pure (UidMap Uid) where
    pure := UidMap.pure
end pure



section map
  /-- Turns a map to `Œ±`-values into a map to `Œ≤`-values. -/
  def UidMap.mapIdx
    (map : UidMap Uid Œ±)
    (f : FUid Uid map.len ‚Üí Œ± ‚Üí Œ≤)
    (capacity : Nat := map.len)
  : UidMap Uid Œ≤ :=
    generate map.len (fun id => f id $ map.get id) capacity

  /-- Plain map operation, does not give access to indices. -/
  def UidMap.map
    (f : Œ± ‚Üí Œ≤)
    (map : UidMap Uid Œ±)
  : UidMap Uid Œ≤ :=
    ‚ü®map.len, map.dmap.map f‚ü©

  /-- `UidMapD` is a functor. -/
  instance : Functor (UidMap Uid) where
    map := UidMap.map
end map



section applicative
  /-- Eager version of monadic `seq`. -/
  def UidMap.seqE
    (fnMap : UidMap Uid (Œ± ‚Üí Œ≤))
    (uidMap : UidMap Uid Œ±)
    (legal : fnMap.len = uidMap.len)
  : UidMap Uid Œ≤ :=
    generate fnMap.len
      (fun uid => (fnMap.get uid) (uidMap.get (legal ‚ñ∏ uid)))

  /-- Lazy version of monadic `seq`. -/
  def UidMap.seq
    (fnMap : UidMap Uid (Œ± ‚Üí Œ≤))
    (uidMap : Unit ‚Üí UidMap Uid Œ±)
    (legal : fnMap.len = (uidMap ()).len)
  : UidMap Uid Œ≤ :=
    let uidMap := uidMap ()
    generate uidMap.len
      (fun id => (fnMap.get (legal ‚ñ∏ id)) (uidMap.get id))



  -- /-- `UidMapD` is an applicative. -/
  -- instance : Applicative (UidMap Uid) where
  --   seq fnMap uidMap :=
  --     let uidMap' := uidMap ()
  --     if legal : fnMap.len = uidMap'.len
  --     then fnMap.seq uidMap legal
  --     else .mkEmpty
end applicative



section conv
  /-- Turns a `UidMapD` into a `Map`. -/
  abbrev UidMapD.toMap
    (dmap : UidMapD n Uid Œ±)
  : UidMap Uid Œ± :=
    ‚ü®n, dmap‚ü©

  @[simp]
  theorem UidMapD.toMap_len
    {dmap : UidMapD n Uid Œ±}
    {map : UidMap Uid Œ±}
    (h : map = dmap.toMap)
  : map.len = n := by
    simp only [h, toMap, len]

  /-- Turn a `UidMapD` into a `Map`. -/
  abbrev Map.ofUidMapD :=
    @UidMapD.toMap

  @[simp]
  theorem Map.ofUidMapD_len
    {dmap : UidMapD n Uid Œ±}
    {map : UidMap Uid Œ±}
    (h : map = Map.ofUidMapD dmap)
  : map.len = n :=
    UidMapD.toMap_len h



  /-- Turns a `Map` into a `UidMapD`. -/
  abbrev Map.toUidMapD
    (map : UidMap Uid Œ±)
  : UidMapD map.len Uid Œ± :=
    map.dmap

  /-- Turns a `Map` into a `UidMapD`. -/
  abbrev UidMapD.ofMap :=
    @Map.toUidMapD
end conv
